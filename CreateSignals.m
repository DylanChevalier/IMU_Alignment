%% Create Interferences
disp('Creating Interferences ...');
%InterferenceVector = CreateInterference(NbInterference,hmin,ts,start,stop);

%% Create Physical Event

parts = {};

delta_tc = 0.4*ts;

parts{1} = struct( ...
	'item', 'raised_cos', ...
	'parameters', struct( ...
		'tcenter', 0 + delta_tc, ...
		'h', 1, ...
		'w', SIGNAL_PARAMETERS.main_pulse_width, ...
		'roundness', 1 ...
	) ...
);

if SIGNAL_PARAMETERS.add_side_pulse
	parts{2} = struct( ...
		'item', 'raised_cos', ...
		'parameters', struct( ...
			'tcenter', parts{1}.parameters.tcenter - parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.size_pulse_shift_interval), ...
			'h', parts{1}.parameters.h * uniform_random(SIGNAL_PARAMETERS.cos_ratio_amplitude_interval), ...
			'w', parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.cos_ratio_width_interval), ...
			'roundness', 0.1 ...
		) ...
	);

end

parts{3} = struct( ...
	'item', 'oscillations', ...
	'parameters', struct( ...
		'env_tcenter', parts{1}.parameters.tcenter - parts{1}.parameters.w / 2, ...		
		'env_h', parts{1}.parameters.h * uniform_random(SIGNAL_PARAMETERS.oscillations_ratio_amplitude_interval), ...
		'env_w', parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.oscillations_ratio_width_interval), ...
		'env_roundness', 1, ...
		'freq_ratio', SIGNAL_PARAMETERS.oscillations_freq_ratio ...
	) ...
);



% interferences common for all sensors
maximum = hmin;
for i = 1:SIGNAL_PARAMETERS.NbInterference												%% <<<<<<< copy of this code added to each sensor
    h = unifrnd(0.1,maximum);       % Random amplitude
    delta = uniform_random(SIGNAL_PARAMETERS.error_width_interval);       % Random width
    u = randi([1 length(twanted)],1,1);   % Randomly on the t-axis
    t0 = twanted(u);                      
    t1 = t0 + delta;
    
	parts{end+1} = struct( ...
		'item', 'raised_cos', ...
		'parameters', struct( ...
			'tcenter', t0 + delta / 2, ...		
			'h', h, ...
			'w', delta, ...
			'roundness', 1 ...
		) ...
	);
end

if SIGNAL_PARAMETERS.IsTime_drift
    t = twanted * (1+SIGNAL_PARAMETERS.time_drift) + uniform_random([-ts*SIGNAL_PARAMETERS.d/100, +ts*SIGNAL_PARAMETERS.d/100], size(twanted));									%% <<<<< to realsense
else
   t = twanted + uniform_random([-ts*SIGNAL_PARAMETERS.d/100, +ts*SIGNAL_PARAMETERS.d/100], size(twanted)); 
end
s_wanted = zeros(size(t));

for n = 1:length(parts)
	part = parts{n};
	if strcmp(part.item, 'raised_cos')
		s_wanted = s_wanted + (cos_pulse(t, part.parameters.tcenter-part.parameters.w/2, part.parameters.tcenter+part.parameters.w/2) .^ (part.parameters.roundness));
	elseif strcmp(part.item, 'oscillations')
		s_wanted = s_wanted + (cos_pulse(t, part.parameters.env_tcenter-part.parameters.env_w/2, part.parameters.env_tcenter+part.parameters.env_w/2) .^ (part.parameters.env_roundness)) .* sin(2*pi*part.parameters.freq_ratio/part.parameters.env_w * (t-part.parameters.env_tcenter));
	end
end

if SIGNAL_PARAMETERS.IsNoise
    s_wanted = s_wanted + randn(size(s_wanted)) * SIGNAL_PARAMETERS.noise_sigma;				%% <<<<< to sensors
end

% mkdir('datas/Original');
% csvwrite('datas/Original/PhysicEvent.csv',[twanted' s_wanted']);
% 
% %% Create DVS Signal
% 
% disp('Creating DVS,RS & LIDAR signals ...');
% [s_dvs,tdvs] = Signal(s_wanted,twanted,ts,ts_dvs,0);
% [s_rs,trs] = Signal(s_wanted,twanted,ts,ts_rs,delayRS);
% [s_lidar,tlidar] = Signal(s_wanted,twanted,ts,ts_lidar,delayLIDAR);








