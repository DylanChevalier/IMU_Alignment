%% Create Interferences
disp('Creating Interferences ...');
%InterferenceVector = CreateInterference(NbInterference,hmin,ts,start,stop);

%% Create Physical Event

parts = {};

delta_tc = 0.4*ts;

parts{1} = struct( ...
	'item', 'raised_cos', ...
	'parameters', struct( ...
		'tcenter', 0, ...
		'h', 1, ...
		'w', SIGNAL_PARAMETERS.main_pulse_width, ...
		'roundness', 1 ...
	) ...
);

if SIGNAL_PARAMETERS.add_side_pulse
	parts{2} = struct( ...
		'item', 'raised_cos', ...
		'parameters', struct( ...
			'tcenter', parts{1}.parameters.tcenter - parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.side_pulse_shift_interval), ...
			'h', parts{1}.parameters.h * uniform_random(SIGNAL_PARAMETERS.cos_ratio_amplitude_interval), ...
			'w', parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.cos_ratio_width_interval), ...
			'roundness', uniform_random(SIGNAL_PARAMETERS.side_pulse_roundness_interval) ...
		) ...
	);

end

if SIGNAL_PARAMETERS.add_left_oscillations
	parts{end+1} = struct( ...
		'item', 'oscillations', ...
		'parameters', struct( ...
			'env_tcenter', parts{1}.parameters.tcenter - parts{1}.parameters.w / 2, ...		
			'env_h', parts{1}.parameters.h * uniform_random(SIGNAL_PARAMETERS.left_oscillations_ratio_amplitude_interval), ...
			'env_w', parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.left_oscillations_ratio_width_interval), ...
			'env_roundness', uniform_random(SIGNAL_PARAMETERS.left_oscillations_env_roundness_interval), ...
			'freq_ratio', uniform_random(SIGNAL_PARAMETERS.left_oscillations_freq_ratio_interval) ...
		) ...
	);
end

if SIGNAL_PARAMETERS.add_right_oscillations
	parts{end+1} = struct( ...
		'item', 'oscillations', ...
		'parameters', struct( ...
			'env_tcenter', parts{1}.parameters.tcenter + parts{1}.parameters.w / 2, ...
			'env_h', parts{1}.parameters.h * uniform_random(SIGNAL_PARAMETERS.right_oscillations_ratio_amplitude_interval), ...
			'env_w', parts{1}.parameters.w * uniform_random(SIGNAL_PARAMETERS.right_oscillations_ratio_width_interval), ...
			'env_roundness', uniform_random(SIGNAL_PARAMETERS.right_oscillations_env_roundness_interval), ...
			'freq_ratio', uniform_random(SIGNAL_PARAMETERS.right_oscillations_freq_ratio_interval) ...
		) ...
	);
end


% interferences common for all sensors
time_min = min(twanted);
time_max = max(twanted);
for i = 1:round(uniform_random(SIGNAL_PARAMETERS.NbInterference_interval))
    h = uniform_random(SIGNAL_PARAMETERS.interference_height_interval);
    w = uniform_random(SIGNAL_PARAMETERS.interference_width_interval);       % Random width
    tcenter = uniform_random([time_min, time_max]);

	parts{end+1} = struct( ...
		'item', 'raised_cos', ...
		'parameters', struct( ...
			'tcenter', tcenter, ...
			'h', h, ...
			'w', w, ...
			'roundness', 1 ...
		) ...
	);
end


t = twanted;
s_wanted = zeros(size(t));

for n = 1:length(parts)
	part = parts{n};
	if strcmp(part.item, 'raised_cos')
		s_wanted = s_wanted + part.parameters.h * (cos_pulse(t, part.parameters.tcenter-part.parameters.w/2, part.parameters.tcenter+part.parameters.w/2) .^ (part.parameters.roundness));
	elseif strcmp(part.item, 'oscillations')
		s_wanted = s_wanted + part.parameters.env_h * (cos_pulse(t, part.parameters.env_tcenter-part.parameters.env_w/2, part.parameters.env_tcenter+part.parameters.env_w/2) .^ (part.parameters.env_roundness)) .* sin(2*pi*part.parameters.freq_ratio/part.parameters.env_w * (t-part.parameters.env_tcenter));
	end
end


%mkdir('datas/Original');
%csvwrite('datas/Original/PhysicEvent.csv', [twanted' s_wanted']);

%% Create DVS Signal

disp('Creating DVS, RS & LIDAR signals ...');
time_limits = [min(twanted), max(twanted)];
[s_dvs,tdvs] = SignalWithArbitraryDelay(SIGNAL_PARAMETERS.dvs, parts, time_limits, ts_dvs, 0);
[s_rs,trs] = SignalWithArbitraryDelay(SIGNAL_PARAMETERS.rs, parts, time_limits, ts_rs, 0);
[s_lidar,tlidar] = SignalWithArbitraryDelay(SIGNAL_PARAMETERS.lidar, parts, time_limits, ts_lidar, 0);








